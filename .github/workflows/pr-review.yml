name: Sentinel AI Code Review

on:
  pull_request:
    paths:
      - '**/*.java'           # Java files
      - '**/*.py'             # Python files
      - '**/*.cs'             # .NET files (C#)
      - '**/*.properties'     # Properties files (commonly used for config)
      - '**/*.yml'            # yml files

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      pull-requests: write
      contents: read

    steps:
      # Step 1: Checkout the pull request code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.2.1
        with:
          gh-cli-version: 2.65.0 # optional, see action.yml for current default

      # Step 2: Set up Google Cloud SDK (for Google Vertex AI or other LLM APIs)
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials: ${{ secrets.GCP_CREDENTIALS }}

      # Step 3: Install curl (if it's not already installed)
      - name: Install curl
        run: sudo apt-get install curl jq

      # Step 4: Get the pull request diff or files and prepare them for review
#      - name: Get Pull Request Files
#        id: pr_files
#        run: |
#          # Get all the relevant files in the PR (Java, Python, .NET, Properties, XML)
#          files=$(gh pr diff --name-only)
#          echo "FILES=$files" >> $GITHUB_ENV
      - name: Get Changed Files
        id: changed-files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
         
          files=$(gh pr diff --name-only ${{ github.event.pull_request.number }} | tr '\n' ' ')
          echo "Files obtained : $files"
          echo "FILES=$files" >> $GITHUB_ENV

      - name: Read File Contents and Prepare Review
        id: review_files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          FILE_CONTENTS=""
           for file in $FILES; do
           echo "Checking fileName : $file"
           content=$(gh api "repos/${{ github.repository }}/contents/$file" \
           -H "Accept: application/vnd.github.v3.raw")
    
           FILE_CONTENTS="$FILE_CONTENTS\n$file:\n$content"
           done
           echo "FILE_CONTENTS<<EOF" >> "$GITHUB_ENV"
           echo -e "$FILE_CONTENTS" >> "$GITHUB_ENV"
           echo "EOF" >> "$GITHUB_ENV"

     

      - name: Encode File Contents
        run: |
          BASE64_ENCODED_FILE_CONTENT=$(echo -e "$FILE_CONTENTS" | base64 -w 0)
          echo "BASE64_ENCODED_FILE_CONTENT=$BASE64_ENCODED_FILE_CONTENT" >> "$GITHUB_ENV"

      - name: Print base64 encoded contents
        run: |
          echo "BASE64_ENCODED_FILE_CONTENT from env: $BASE64_ENCODED_FILE_CONTENT"

      # Step 5: Set GCLOUD_CREDENTIALS from GitHub Secrets
      - name: Set GCLOUD_CREDENTIALS
        run: echo "${{ secrets.GCLOUD_CREDENTIALS }}" | base64 --decode > $HOME/gcloud-credentials.json

      # Step 6: Authenticate with Google Cloud using the credentials JSON
      - name: Authenticate with Google Cloud
        run: gcloud auth activate-service-account --key-file=$HOME/gcloud-credentials.json

      - name: Authenticate with Google Cloud
        env:
            GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
        run: |
            echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > /tmp/google-credentials.json
            gcloud auth activate-service-account --key-file=/tmp/google-credentials.json

      - name: Get Access Token
        id: get_token
        run: echo "ACCESS_TOKEN=$(gcloud auth print-access-token)" >> $GITHUB_ENV


      - name: New Create AI Code Review Request
        run: |
         
          echo '${{ vars.VERTEX_PROMPT_JSON }}' > request.json
          cat request.json
          jq --arg new_value "${{ env.BASE64_ENCODED_FILE_CONTENT }}" \
            '.contents.parts.text |= gsub("\\MY_BASE_64_ENCODED_CONTENT"; $new_value)' request.json > updated_request.json
          echo "Jq running done. Now showing new content"
          cat updated_request.json  

      - name: Get AI Code Review Response
        timeout-minutes: 10
        run: |

          # Send the request to the API endpoint
          curl -X POST "https://us-central1-aiplatform.googleapis.com/v1/projects/customerinfowithaiagent/locations/us-central1/publishers/google/models/gemini-2.0-flash-exp:generateContent" \
           -H "Authorization: Bearer $ACCESS_TOKEN" \
           -H "Content-Type: application/json" \
           -d @updated_request.json > response.json
          echo "Printing the Pull Request reviews"
          jq -r '.candidates[0].content.parts[0].text' response.json > review_comments.txt

      - name: Save AI Review Comments
        run: |
          COMMENT_BODY=$(cat review_comments.txt)
          COMMENT_BODY=$(echo "$COMMENT_BODY" | awk '{sub(/\r$/,""); print}')
          
          echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
          echo "$COMMENT_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Publish AI Review as PR Comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Reviewer Assist : Ai Generated Code Review
            
            ${{ env.COMMENT_BODY }} 

      - name: Create Enhanced AI Code Review Request
        run: |
          echo '${{ vars.VERTEX_CODE_FIX_PROMPT }}' > review_comments_fix.json
          jq --arg new_value "${{ env.BASE64_ENCODED_FILE_CONTENT }}" \
            '.contents.parts[].text |= gsub("\\MY_BASE_64_ENCODED_CONTENT"; $new_value)' review_comments_fix.json > updated_review_comments_fix.json
          cat updated_review_comments_fix.json
          

      - name: Get AI Code Fix Response
        timeout-minutes: 10
        run: |
          # Send the request to the API endpoint
          curl -X POST "https://us-central1-aiplatform.googleapis.com/v1/projects/customerinfowithaiagent/locations/us-central1/publishers/google/models/gemini-2.0-flash-exp:generateContent" \
           -H "Authorization: Bearer $ACCESS_TOKEN" \
           -H "Content-Type: application/json" \
           -d @updated_review_comments_fix.json > code_fix_response.json

          # Extract the base64 encoded content from response
          jq -r '.candidates[0].content.parts[0].text' code_fix_response.json > encoded_fixed_code.txt

          # Decode the base64 content
          cat encoded_fixed_code.txt | base64 -d > fixed_code.txt
          cat fixed_code.txt

          echo "Fixed code has been decoded and saved to fixed_code.txt"

# works till here
      - name: Create and Switch to AI-assisted Branch
        run: |
            # Get the source branch name from the PR
            SOURCE_BRANCH="${{ github.head_ref }}"
            echo "Source branch is: $SOURCE_BRANCH"
            
            # Create new branch name
            AI_BRANCH="ai-assisted-${SOURCE_BRANCH}"
            echo "AI branch will be: $AI_BRANCH"
            
            # Ensure we're on the source branch
            git fetch origin
            git checkout $SOURCE_BRANCH
            
            # Create new branch from source branch
            git checkout -b $AI_BRANCH
            
            # Save branch name for later steps
            echo "AI_BRANCH=$AI_BRANCH" >> $GITHUB_ENV

      - name: Update Files with AI Changes
        run: |
            # Get list of files from the PR
            for file in $FILES; do
              # Create directories if they don't exist
              mkdir -p $(dirname "$file")
            
              # Copy the fixed content to the file
              cat fixed_code.txt > "$file"
            done

      - name: Commit and Push Changes
        run: |
            # Configure git
            git config --global user.name 'GitHub Actions Bot'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Set up authentication using the token
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          
          # Add all changes
            git add .
            
            # Commit changes
            git commit -m "AI-assisted improvements: Enhanced code quality and naming"
            
            # Push the new branch with changes
            git push origin ${{ env.AI_BRANCH }}