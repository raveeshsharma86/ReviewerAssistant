name: Sentinel AI Code Review

on:
  pull_request:
    paths:
      - '**/*.java'           # Java files
      - '**/*.py'             # Python files
      - '**/*.cs'             # .NET files (C#)
      - '**/*.properties'     # Properties files (commonly used for config)
      - '**/*.yml'            # yml files

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      pull-requests: write
      contents: write
      actions: write
      repository-projects: write

    steps:
      # Step 1: Checkout the pull request code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.2.1
        with:
          gh-cli-version: 2.65.0 # optional, see action.yml for current default

      # Step 2: Set up Google Cloud SDK (for Google Vertex AI or other LLM APIs)
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials: ${{ secrets.GCP_CREDENTIALS }}

      # Step 3: Install curl (if it's not already installed)
      - name: Install curl
        run: sudo apt-get install curl jq

      # Step 4: Get the pull request diff or files and prepare them for review
#      - name: Get Pull Request Files
#        id: pr_files
#        run: |
#          # Get all the relevant files in the PR (Java, Python, .NET, Properties, XML)
#          files=$(gh pr diff --name-only)
#          echo "FILES=$files" >> $GITHUB_ENV
      - name: Get Changed Files
        id: changed-files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        run: |
         
          files=$(gh pr diff --name-only ${{ github.event.pull_request.number }} | tr '\n' ' ')
          echo "Files obtained : $files"
          echo "FILES=$files" >> $GITHUB_ENV

      - name: Create Processing Directories
        run: |
          mkdir -p file_contents
          mkdir -p review_responses
          
          

      #- name: Read File Contents and Prepare Review
      #  id: review_files
      #  env:
      #    GH_TOKEN: ${{ github.token }}
      #  run: |
      #    FILE_CONTENTS=""
      #     for file in $FILES; do
      #     echo "Checking fileName : $file"
      #     content=$(gh api "repos/${{ github.repository }}/contents/$file" \
      #     -H "Accept: application/vnd.github.v3.raw")

      #     FILE_CONTENTS="$FILE_CONTENTS\n$file:\n$content"
      #     done
      #     echo "FILE_CONTENTS<<EOF" >> "$GITHUB_ENV"
      #     echo -e "$FILE_CONTENTS" >> "$GITHUB_ENV"
      #     echo "EOF" >> "$GITHUB_ENV"

      - name: Read File Contents and Prepare Review
        id: review_files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          for file in $FILES; do
            echo "Processing file: $file"
            # Get raw content and encode to base64
            content=$(gh api "repos/${{ github.repository }}/contents/$file" \
              -H "Accept: application/vnd.github.v3.raw" | base64 -w 0)

            # Save base64 content to individual file
            echo "$content" > "file_contents/${file//\//_}.b64"

            # Create individual request JSON for this file
            jq --arg file "$file" \
               --arg content "$content" \
               '.contents.parts.text |= gsub("MY_BASE_64_ENCODED_CONTENT"; $content) | .contents.parts.text |= gsub("CURRENT_FILE_NAME"; $file)' \
               <(echo '${{ vars.VERTEX_PROMPT_JSON }}') > "file_contents/request_${file//\//_}.json"
          done
      - name: Encode File Contents
        run: |
          BASE64_ENCODED_FILE_CONTENT=$(echo -e "$FILE_CONTENTS" | base64 -w 0)
          echo "BASE64_ENCODED_FILE_CONTENT=$BASE64_ENCODED_FILE_CONTENT" >> "$GITHUB_ENV"

      - name: Print base64 encoded contents
        run: |
          echo "BASE64_ENCODED_FILE_CONTENT from env: $BASE64_ENCODED_FILE_CONTENT"

      - name: Authenticate with Google Cloud
        env:
            GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
        run: |
            echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > /tmp/google-credentials.json
            gcloud auth activate-service-account --key-file=/tmp/google-credentials.json

      - name: Get Access Token
        id: get_token
        run: echo "ACCESS_TOKEN=$(gcloud auth print-access-token)" >> $GITHUB_ENV


      - name: New Create AI Code Review Request
        run: |
         
          echo '${{ vars.VERTEX_PROMPT_JSON }}' > request.json
          cat request.json
          jq --arg new_value "${{ env.BASE64_ENCODED_FILE_CONTENT }}" \
            '.contents.parts.text |= gsub("\\MY_BASE_64_ENCODED_CONTENT"; $new_value)' request.json > updated_request.json
          echo "Jq running done. Now showing new content"
          cat updated_request.json  

      #- name: Get AI Code Review Response
      #  timeout-minutes: 10
      #  run: |

          # Send the request to the API endpoint
      #    curl -X POST "https://us-central1-aiplatform.googleapis.com/v1/projects/customerinfowithaiagent/locations/us-central1/publishers/google/models/gemini-2.0-flash-exp:generateContent" \
      #     -H "Authorization: Bearer $ACCESS_TOKEN" \
      #     -H "Content-Type: application/json" \
      #     -d @updated_request.json > response.json
      #    echo "Printing the Pull Request reviews"
      #    # This is used for printing in the PR
      #    jq -r '.candidates[0].content.parts[0].text' response.json > review_comments.txt

      - name: Get AI Code Review Response
        timeout-minutes: 10
        run: |
            echo "{" > review_mapping.json
            first=true
            
            for file in $FILES; do
              if [ "$first" = true ]; then
                first=false
              else
                echo "," >> review_mapping.json
              fi
            
              echo "Reviewing file: $file"
            
              # Send request for this specific file
              curl -X POST "https://us-central1-aiplatform.googleapis.com/v1/projects/customerinfowithaiagent/locations/us-central1/publishers/google/models/gemini-2.0-flash-exp:generateContent" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Content-Type: application/json" \
                -d @"file_contents/request_${file//\//_}.json" > "review_responses/${file//\//_}.json"
            
              # Extract and clean the review comments
              jq -r '.candidates[0].content.parts[0].text' "review_responses/${file//\//_}.json" > "review_responses/${file//\//_}.txt"
            
              # Format for mapping
              cleaned_content=$(cat "review_responses/${file//\//_}.txt" | \
                sed 's/```[a-zA-Z]*//g' | \
                sed 's/```//g' | \
                sed 's/\\/\\\\/g' | \
                sed 's/"/\\"/g' | \
                sed ':a;N;$!ba;s/\n/\\n/g')
            
              echo "  \"$file\": \"$cleaned_content\"" >> review_mapping.json
            done
            
            echo "}" >> review_mapping.json

      - name: Convert markdown to plain text
        id: markdown_to_text_converter
        uses: docker://pandoc/core:3.5
        with:
          args:  "--from markdown --to plain -o review_comments_plain.txt review_comments.txt"

      - name: Print plain Text
        run: |
          echo "Printing plain text review comments"
          
          cat review_comments_plain.txt | \
          sed 's/^#\+//g' | \
          sed 's/\*\*//g' | \
          sed 's/\*//g' | \
          sed 's/`\{1,3\}//g' | \
          sed 's/^-\s//g' | \
          sed 's/^\s\+//g' | \
          sed '/^$/d' | \
          tr '\n' ' ' | \
          sed 's/\s\+/ /g' | \
          jq -R -s '{ "text": . }' > clean_review_comments.json
          cat clean_review_comments.json
          

      - name: Format Combined Review
        run: |
          echo "### AI Code Review Summary" > formatted_review.md
          echo "" >> formatted_review.md
          
          for file in $FILES; do
            echo "#### 📁 $file" >> formatted_review.md
            echo "" >> formatted_review.md
            echo "<details><summary>Show Review</summary>" >> formatted_review.md
            echo "" >> formatted_review.md
            cat "review_responses/${file//\//_}.txt" >> formatted_review.md
            echo "" >> formatted_review.md
            echo "</details>" >> formatted_review.md
            echo "" >> formatted_review.md
          done
          
          cat formatted_review.md > review_comments.txt    

      - name: Save AI Review Comments
        run: |
          COMMENT_BODY=$(cat review_comments.txt)
          COMMENT_BODY=$(echo "$COMMENT_BODY" | awk '{sub(/\r$/,""); print}')
          
          echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
          echo "$COMMENT_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Publish AI Review as PR Comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Reviewer Assist : Ai Generated Code Review
            
            ${{ env.COMMENT_BODY }}